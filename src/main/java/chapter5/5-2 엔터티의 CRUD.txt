데이터베이스 처리에선 단순히 모든 데이터를 추출만 하면 되는 경우는 드물다.
데이터를 새롭게 저장하거나 기존 데이터를 변경, 삭제하는 처리도 필요하다. 이런 처리를 CRUD(크루드) 라고 한다.
Create(생성), Read(읽기), Update(변경), Delete(삭제)의 앞 글자를 따서 CRUD 라고 한다.

    폼으로 데이터 저장

먼저 데이터 저장부터 해보자. 템플릿에 폼을 준비하고 이것을 전송해서 MyData 의 엔터티를 만들어
저장하는 처리를 생각해보자.
먼저 템플릿을 수정한다.

    index02.html

폼을 준비하고 거기에 폼용 객체 formModel 을 적용하고 있다. <form> 태그를 보면 다음과 같이 돼 있다.


    <form method="post" action="/index02" th:object="${formModel}">


뒤에 있는 <input> 문에선 th:value 로 formModel 의 값을 대입하고 있다. 이렇게 하면 formModel 에 초깃값 등을 설정해서
그것을 폼에 미리 설정해두는 것이 가능하다.
또한, 그 아래 코드에는 datalist 의 데이터를 테이블에 표시하는 처리도 있다.
<table> 내에 다음과 같은 형태로 반복 처리를 하고 있다.


    <tr th:each="obj : ${datalist}">


datalist 에서 순서대로 객체를 꺼내서 변수 obj 에 설정하는 것이다. 나머지는 <td> 태그에 th:text 를 준비해서 그 안에
id 나 name 을 출력시키는 처리다.

        컨트롤러 수정하기

다음은 컨트롤러를 수정한다.

    HeloController02.java

        @ModelAttribute 와 데이터 저장

여기선 페이지에 접속했을 때와 폼을 전송했을 때의 처리를 index 와 form 이라는 두 개의 메소드를 이용해서 처리하고 있다.
이 메소드를 잘 보면 처음 보는 어노테이션이 몇 가지 등장하고 있다.

    @ModelAttribute 어노테이션

각 메소드에는 MyData 인스턴스를 인수로 지정하고 있으며 여기에는 @ModelAttribute 라는 어노테이션이 부여돼 있다.
이것은 엔터티 클래스의 인스턴스를 자동으로 적용할 때 사용된다. 인수에는 인스턴스 이름을 지정한다.
이것은 전송 폼에서 th:object 로 지정하는 값이 된다.
GET 접속의 index 메소드에선 단순히 new 한 인스턴스가 MyData 의 인수로 할당되지만 POST 접속에서 호출되는 form 메소드에선
전송된 폼의 값이 자동으로 MyData 인스턴스로 전달된다. 이것을 그대로 저장하면 되는 것이다. @ModelAttribute 를
이용하므로 이렇게 쉽게 전송한 데이터를 저장할 수 있다.

참고로 여기선 @ModelAttribute 어노테이션을 사용하고 있지만, 이것을 반드시 사용해야 하는 것은 아니다.
보통 new MyData 로 인스턴스를 만들고 전송된 값을 하나씩 인스턴스로 설정해도 된다. 단, 이 방법은 번거롭기 때문에
@ModelAttribute 을 사용해서 자동으로 인스턴스를 설정해주는 것이다.

    saveAndFlush 를 사용한 저장

그렇다면 설정한 엔터티는 어떤 식으로 저장하는 것일까? 다음을 보자


    repository.saveAndFlush(mydata);


JpaRepository 의 'saveAndFlush' 라는 메소드는 인수로 지정한 엔터티를 영구화한다.
데이터베이스를 사용하고 있다면 데이터베이스에 그대로 저장된다. 매우 간단한 구조다.

        @Transaction 과 트랜잭션

데이터를 저장할 때 한 가지 더 관심을 가져야 할 것이 있다. 바로 form 메소드에 있는 다음 어노테이션이다.
이 @Transaction 어노테이션은 '트랜잭션' 기능을 위한 것이다. 트랜잭션은 데이터베이스의 일련의 처리를 일괄적으로
실행하기 위한 구조다. 이 어노테이션을 사용하므로 메소드 내에서 실행되는 데이터베이스 처리가 일괄적으로 실행되게 된다.
복수의 데이터베이스 처리를 실행하는 경우 다른 처리가 끼어드는 경우도 있다. 특히 데이터 변경 처리는 도중에
외부 접속에 의해 데이터 구조나 내용이 바뀌면 데이터 일관성에 문제가 발생하게 된다. 이런 문제를 방지하기 위해
트랜잭션이 사용되는 것이다.
여기서 인수로 'readOnly=false' 를 설정하고 있다. 이 readOnly 는 문자 그대로 '읽기 전용(변경 불가)' 임을 의미한다.
readOnly=false 라고 설정하면 읽기 전용이 아니라는 의미가 되므로 변경을 허가하는 트랜잭션이 된다.

        데이터 초기화 처리

실제로 사용해보자. 저장한 데이터는 애플리케이션을 종료하고 재실행하면 사라져버린다.
HSQLDB 는 기본적으로 메모리 내에 데이터를 캐시하고 있으므로 종료와 함께 사라져버리는 것이다.
학습용으로는 편리할 수 있지만, 실행 시마다 매번 테스트용 데이터를 재작성해야 하는 불편함이 있다.
이런 불편함을 해소하기 위해 컨트롤러에 테스트용 데이터를 작성하는 초기화 처리를 추가하겠다.
HeloController 에 메소드를 추가하자.

    HeloController03.java

이것은 세 개의 MyData 인스턴스를 작성해서 저장하는 초기화 처리다. 데이터 내용은 자유롭게 변경해도 좋다.
여기선 메소드에 @PostConstruct 라는 어노테이션이 붙어 있다. 이것은 생성자를 통해 인스턴스가 생성된 후에
호출되는 메소드임을 나타낸다.
컨트롤러는 처음에 한 번만 인스턴스를 만들고 이후에는 해당 인스턴스를 유지한다. 따라서 여기에 테스트용
데이터 작성 처리를 작성해두면 애플케이션 실행 시에 반드시 한 번 실행돼서 데이터가 준비되는 것이다.

        MyData 변경

계속해서 이미 저장한 데이터를 변경하는 처리를 보자. 데이터 저장과 비슷하지만 실제 처리는 약간 다르다.
먼저 이미 저장된 데이터를 꺼내는 방법을 알아야 하며, 꺼낸 내용을 변경하는 방법을 이해해야 한다.
일단 예제를 만들어보자. 이번에는 새로운 템플릿을 사용하겠다. 메이븐 명령을 개발하고 있다면
templates 폴더에 'edit.html' 이라는 텍스트 파일을 만든다.

    Edit.html 파일 편집

작성된 파일 edit.html 을 편집하자.

    edit04.html

index 와 차이점은 폼을 그대로 가져온 것과 같다. 단, 한 가지 차이점이 있는데 다음과 같이 숨김 필드 태그가 추가된 것이다.


    <input type="hidden" name="id" th:value="*{id}" />"


<form> 에는 th:object="${formModel}" 이 지정돼 있으며 formModel 에 설정된 인스턴스를 기반으로 값이 설정된다.
이 formModel 에 편집할 엔터티가 설정돼 있으면 해당 ID 가 숨김 필드에 저장된다.

    MyDataRepository 에 추가

다음은 'ID로 엔터티 를 검색해서 추출하는 처리' 다. 이것은 리포지터리를 사용하면 된다.
MyDataRepository 인터페이스를 열어서 다음과 같이 변경하자.

    MyDataRepository04.java

비어있던 인터페이스에 public MyData findById(Long name); 이라는 한 줄을 추가하였다.
이 'findById' 가 ID 번호를 인수로 해서 MyData 인스턴스를 추출하는 메소드다.

        리퀘스트 핸들러 작성하기

다음은 /edit 용 리퀘스트 핸들러를 작성해보자. GET 접속용, POST 용 update 메소드를 설정하고 있다.
HeloController 를 수정하자.

    HeloController04.java

이것으로 작업 완료다.

    메소드 확인

이제 처리 내용을 보자. 먼저 GET 접속 시에 호출되든 edit 메소드다. 여기선 쿼리 스트링으로 전송된 ID 번호를 엔터티에서
가져와서 addObject 로 저장하고 있다.


    Mydata data = repository.findById((long) id);
    mav.addObject("formModel", data);


MyDataRepository 에서 설정한 'findById' 를 사용해서 전달된 ID 의 엔터티를 검색하고 있다. 그리고 가져온 엔터티를
그대로 formModel 에 설정하고 있다. 이것으로 엔터티의 내용이 그대로 템플릿의 폼에 표시되게 된다.
폼은 그대로 /edit 로 전송되고 update 메소드가 호출된다. 그리고 전송된 폼의 데이터를 사용해서 데이터를
변경하는 것이다.


    repository.saveAndFlush(mydata);


보면 알 수 있듯 새로운 데이터를 저장할 때와 동일하게 saveAndFlush 로 데이터를 변경하고 있다.
데이터 저장은 모두 이 메소드를 사용하면 된다. 신규 저장과 변경의 차이는 '인수의 엔터티에 ID 가 지정돼는지 여부' 다.

edit.html 에서 formModel 의 ID 를 숨김 필드에 저장했었다. saveAndFlush 로 엔터티를 저장할 때 이미 해당 ID 의 엔터티가
존재하면 해당 내용을 변경해서 저장하는 것이다. 신규 작성 폼에는 ID 필드가 없었다. 이 경우 새롭게 ID를 할당해서
새로운 엔터티로 저장하는 것이다.
즉, 프로그래머는 해당 엔터티와 같은 ID 가 이미 존재하는지 생각할 필요가 없다. 단순히 엔터티를 저장하면
상황에 맞게 신규로 저장해주거나 기존 데이터를 변경해주는 것이다.

    findById는 어디서 구현한 것인가?

변경 처리에 대해 계속 설명했지만 잘 생각해보면 한 가지 빠진 것이 있다. 바로 ID로 엔터티를 검색해주는 findById 메소드다.
이 메소드는 MyDataRepository 인터페이스에 선언만 했고 처리 내용을 기술하지 않았다.
어떻게 메소드를 구현하지 않았는데도 실행되는 것일까? 이것이 바로 리포지터리의 최대 장점이다.
리포지터리는 메소드명을 기준으로 엔터티 검색 처리를 자동으로 생성하게 돼 있다.
findById 메소드도 인수의 값을 ID 로 가지는 엔터티를 검색하는 처리를 자동 생성해서 사용할 수 있게 된 것이다.
이 구조에 대해선 뒤에 설명하자.

        엔터티 삭제하기

마지막으로 엔터티 삭제를 살펴본다. 삭제는 단순히 지정 ID를 쿼리 스트링으로 보내서 해당 ID 데이터를 삭제하는 것도 좋지만
삭제 대상 데이터의 내용을 확인하기 위해서는 엔터티 변경 처리와 같은 방식으로 하는 것이 좋다.
즉, 먼저 쿼리 스트링에 ID를 지정해서 접속하면 해당 엔터티의 내용이 표시되게 한다.
여기에 삭제 버튼을 배치해서 버튼이 눌리면 삭제하도록 하는 것이다.